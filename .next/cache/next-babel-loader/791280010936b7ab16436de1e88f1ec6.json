{"ast":null,"code":"// This compute witness script is inspired blockchain dev community from previous hackathon\nvar crypto = require('crypto');\n\nvar BN = require(\"bn.js\");\n\nfunction getSecretParams(concat) {\n  return [concat.slice(0, 32), concat.slice(32, 64), concat.slice(64, 96), concat.slice(96)];\n}\n\nfunction getPublicParams(payload) {\n  var buffer = Buffer.from(payload, 'hex');\n  var digest = crypto.createHash('sha256').update(buffer).digest('hex');\n  return [digest.slice(0, 32), digest.slice(32)];\n}\n\nfunction getPayload(owner, owneramount) {\n  var address = new BN(owner, 16).toString(16, 64);\n  var amount = new BN(owneramount, 16).toString(16, 64);\n  return address + amount;\n}\n\nfunction getParams(owner, amount) {\n  var payload = getPayload(owner, amount);\n  var zkParams = getPublicParams(payload).concat(getSecretParams(payload));\n  return zkParams;\n}\n\nfunction formatWitness(params) {\n  var command = \"\";\n  params.forEach(function (param) {\n    command += \"\".concat(new BN(param, 16).toString(10), \" \");\n  });\n  console.log(command);\n  return command;\n}\n\nexport function getWitness(from, fAmount, to, tAmount) {\n  from = from.slice(2);\n  fAmount = fAmount.slice(2);\n  to = to.slice(2);\n  tAmount = tAmount.slice(2);\n  var diff = parseInt(fAmount.slice(2), 16) - parseInt(tAmount.slice(2), 16);\n  var params = getParams(from, fAmount).concat(getParams(to, tAmount));\n  var leftOverWitness = getParams(from, diff);\n  leftOverWitness.splice(2, 2);\n  return formatWitness(params.concat(leftOverWitness));\n} // getWitness(\n//     // \"0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c\",\n//     '0x48845392F5a7c6b360A733e0ABE2EdcC74f1F4d6', // sender\n//     '9', // value of the secret note\n//     '0xE33f4C2306eFE9BF66a64A3c42408d2Fe1Cb890f', // receiver\n//     // \"0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\",\n//     '1' // value to be sent\n//   );","map":{"version":3,"sources":["C:/A Computer/Blockchain/ETHGlobal/Gitcoin/MakerDao/TrustlessDai/functions/getWitness.js"],"names":["crypto","require","BN","getSecretParams","concat","slice","getPublicParams","payload","buffer","Buffer","from","digest","createHash","update","getPayload","owner","owneramount","address","toString","amount","getParams","zkParams","formatWitness","params","command","forEach","param","console","log","getWitness","fAmount","to","tAmount","diff","parseInt","leftOverWitness","splice"],"mappings":"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","sourcesContent":["// This compute witness script is inspired blockchain dev community from previous hackathon\r\n\r\nconst crypto = require('crypto');\r\nconst BN = require(\"bn.js\");\r\n\r\n\r\nfunction getSecretParams(concat) {\r\n    return [concat.slice(0, 32), concat.slice(32, 64), concat.slice(64, 96), concat.slice(96)];\r\n}\r\n\r\nfunction getPublicParams(payload) {\r\n    const buffer = Buffer.from(payload, 'hex');\r\n    const digest = crypto.createHash('sha256').update(buffer).digest('hex');\r\n    return [digest.slice(0, 32), digest.slice(32)]\r\n}\r\n\r\nfunction getPayload(owner, owneramount) {\r\n  let address = new BN(owner, 16).toString(16, 64);\r\n  let amount = new BN(owneramount, 16).toString(16, 64);\r\n  return address + amount;\r\n}\r\n\r\nfunction getParams(owner, amount) {\r\n    let payload = getPayload(owner, amount)\r\n    let zkParams = getPublicParams(payload).concat(getSecretParams(payload));\r\n    return zkParams;\r\n} \r\n\r\nfunction formatWitness(params) {\r\n    let command =\"\";\r\n    params.forEach(param => {\r\n      command += `${new BN(param, 16).toString(10)} `\r\n    })\r\n    console.log(command);\r\n    return command;\r\n}\r\n\r\nexport function getWitness(from, fAmount, to, tAmount) {\r\n    from = from.slice(2)\r\n    fAmount = fAmount.slice(2)\r\n    to = to.slice(2)\r\n    tAmount = tAmount.slice(2)\r\n    var diff = parseInt(fAmount.slice(2), 16) - parseInt(tAmount.slice(2), 16)\r\n    const params = getParams(from, fAmount).concat(getParams(to, tAmount));\r\n    let leftOverWitness = getParams(from, diff);\r\n    leftOverWitness.splice(2, 2);\r\n    return formatWitness(params.concat(leftOverWitness));\r\n}\r\n\r\n\r\n// getWitness(\r\n//     // \"0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c\",\r\n//     '0x48845392F5a7c6b360A733e0ABE2EdcC74f1F4d6', // sender\r\n//     '9', // value of the secret note\r\n//     '0xE33f4C2306eFE9BF66a64A3c42408d2Fe1Cb890f', // receiver\r\n//     // \"0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\",\r\n//     '1' // value to be sent\r\n//   );\r\n\r\n"]},"metadata":{},"sourceType":"module"}